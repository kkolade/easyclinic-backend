---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:

  "/users":
    post:
      summary: create user
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: successful
  "/login":
    post:
      summary: login auth
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: successful
  "/auto_login":
    get:
      summary: auto_login auth
      tags:
        - User
      responses:
        '200':
          description: successful
  "/user_is_authed":
    get:
      summary: user_is_authed auth
      tags:
        - User
      responses:
        '200':
          description: successful
  
  "/api/v1/users/{user_id}/reservations":
    parameters:
    - name: user_id
      in: path
      description: user_id
      required: true
      schema:
        type: string
    get:
      summary: list reservations
      tags:
        - Reservation
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
    post:
      summary: create reservation
      tags:
        - Reservation
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationInput'
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '201':
          description: successful
  "/api/v1/users/{user_id}/reservations/{id}":
    parameters:
    - name: user_id
      in: path
      description: user_id
      required: true
      schema:
        type: string
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show reservation
      tags:
        - Reservation
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
    patch:
      summary: update reservation
      tags:
        - Reservation
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationInput'
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
    delete:
      summary: delete reservation
      tags:
        - Reservation
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful

  "/api/v1/doctors":
    get:
      summary: list doctors
      tags:
        - Doctor
      responses:
        '200':
          description: successful
    post:
      summary: create doctor
      tags:
        - Doctor
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
  "/api/v1/doctors/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show doctor
      tags:
        - Doctor
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
    patch:
      summary: update doctor
      tags:
        - Doctor
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
    delete:
      summary: delete doctor
      tags:
        - Doctor
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful

  "/api/v1/specialties":
    get:
      summary: list specialties
      tags:
        - Specialty
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
    post:
      summary: create specialty
      tags:
        - Specialty
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
  "/api/v1/specialties/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show specialty
      tags:
        - Specialty
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
    patch:
      summary: update specialty
      tags:
        - Specialty
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
    delete:
      summary: delete specialty
      tags:
        - Specialty
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
  
  "/api/v1/clinics":
    get:
      summary: list clinics
      tags:
        - Clinic
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinic'
      responses:
        '200':
          description: successful
    post:
      summary: create clinic
      tags:
        - Clinic
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinic'
      responses:
        '200':
          description: successful
  "/api/v1/clinics/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show clinic
      tags:
        - Clinic
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
    patch:
      summary: update clinic
      tags:
        - Clinic
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Clinic'
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
    delete:
      summary: delete clinic
      tags:
        - Clinic
      security:
        - BearerAuth: []
      parameters:
        - in: header
          name: Authorization
          description: Bearer token obtained after user login
          required: true
          schema:
            type: string
            example: "Bearer your_token_here"
      responses:
        '200':
          description: successful
  
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserInput:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        birthdate:
          type: string
          format: date
        role:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
    UserOutput:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone_number:
          type: string
        birthdate:
          type: string
          format: date
        role:
          type: string
        email:
          type: string
    LoginInput:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: '#/components/schemas/UserOutput'
    ReservationInput:
      type: object
      properties:
        reservation_date:
          type: string
          format: date
        reservation_time:
          type: string
          format: time
        doctor_id:
          type: integer
        clinic_id:
          type: integer
    ReservationOutput:
      type: object
      properties:
        reservation_id:
          type: integer
        doctor_id:
          type: integer
        clinic_id:
          type: integer
    Doctor:
      type: object
      properties:
        name:
          type: string
        photo:
          type: string
        bio:
          type: string
        experience_years:
          type: string
        user_id:
          type: integer
    Clinic:
      type: object
      properties:
        name:
          type: string
        city:
          type: string
        address:
          type: string
        doctor_id:
          type: integer
    Specialty:
      type: object
      properties:
        name:
          type: string
        doctor_id:
          type: integer
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
servers:
- url: http://localhost:3000/
  variables:
    defaultHost:
      default: http://localhost:3000/
